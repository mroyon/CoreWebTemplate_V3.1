<%@ CodeTemplate OutputType="None" Language="C#" TargetLanguage="Text" Src="" Inherits="" CompilerVersion="v3.5" Debug="False" Description="Template description here." %>

<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Text" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import NameSpace="System.Linq" %>

<%@ Property Name="NameSpace" Type="System.String" Optional="False"  Default="GW2" %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" DeepLoad="True" Optional="False" Category="01. Getting Started - Required" Description="Database that the tables views, and stored procedures should be based on. IMPORTANT!!! If SourceTables and SourceViews are left blank, the Entire Database will then be generated." %>

<%@ Property Name="IDaoOutputDirectory" Type="System.String" Default="" Optional="False" Description="The folder to save the generated files." Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>

<%@ Register Name="IDataAccess" Template="IDataAccess.cst"  %>

<script runat="template">

public override void Render(TextWriter writer)
{
	if (!System.IO.Directory.Exists(this.IDaoOutputDirectory))
	{
		System.IO.Directory.CreateDirectory(this.IDaoOutputDirectory);
	}
		
	foreach(TableSchema table in SourceDatabase.Tables.Where(t => t.HasPrimaryKey))
	{
		 //if (!table.Name.Contains("asec_"))
		 CreateIDao(table);
	}
}

public void CreateIDao(TableSchema table)
{
    IDataAccess idaoComposer = this.Create<IDataAccess>();
	idaoComposer.SourceTable = table;
	idaoComposer.NameSpace = NameSpace;	

	string fileName = String.Format("{0}/I{1}DataAccessObjects.cs", IDaoOutputDirectory, table.Name.ToString().ToLower());
	
	OutputFile outputFile = new OutputFile(fileName);
	idaoComposer.RenderToFile(outputFile, true);	
}


public string GetClassName(TableSchema table)
{
	if (table.Name.EndsWith("s"))
	{
		return table.Name.Substring(0, table.Name.Length - 1);
	}
	else
	{
		return table.Name;
	}
}

</script>