<%@ CodeTemplate OutputType="None" Language="C#" TargetLanguage="Text" Src="" Inherits="" CompilerVersion="v3.5" Debug="False" Description="Template description here." %>

<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Text" %>
<%@ Import NameSpace="System.IO" %>

<%@ Property Name="ServiceNameSpace" Type="System.String" Optional="False" Default="KAF" %>
<%@ Property Name="WebNameSpace" Type="System.String" Optional="False" %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" DeepLoad="True" Optional="False" Category="01. Getting Started - Required" Description="Database that the tables views, and stored procedures should be based on. IMPORTANT!!! If SourceTables and SourceViews are left blank, the Entire Database will then be generated." %>
<%@ Property Name="WPOutputDirectory" Type="System.String" Optional="False" Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>

<%@ Register Name="GENController" Template="GEN_Controller.cst"  %>
<%@ Register Name="GENLanding" Template="GEN_LandingView.cst"  %>
<%@ Register Name="GENCreateView" Template="GEN_CreateView.cst"  %>
<%@ Register Name="GENUpdateView" Template="GEN_UpdateView.cst"  %>
<%@ Register Name="GENDetailView" Template="GEN_DetailView.cst"  %>

<%@ Register Name="GENLandingJS" Template="GEN_LandingView_JS.cst"  %>
<%@ Register Name="GENCreateViewJS" Template="GEN_CreateView_JS.cst"  %>
<%@ Register Name="GENUpdateViewJS" Template="GEN_UpdateView_JS.cst"  %>
<%@ Register Name="GENDetailViewJS" Template="GEN_DetailView_JS.cst"  %>

<script runat="template">

public override void Render(TextWriter writer)
{
    string ControllerOutputDirectory=String.Format("{0}/{1}", this.WPOutputDirectory,"Controller");
    string BaseJSOutputDirectory=String.Format("{0}/{1}", this.WPOutputDirectory,"JS");
    string BaseViewOutputDirectory=String.Format("{0}/{1}", this.WPOutputDirectory,"View");

    foreach(TableSchema table in SourceDatabase.Tables.Where(t => t.HasPrimaryKey ))
	{
        Response.Write(table.Name);
        try{
    		string JSOutputDirectory=String.Format("{0}/{1}", BaseJSOutputDirectory,GetTableNamesWithPrefix(table));
			string ViewOutputDirectory=String.Format("{0}/{1}", BaseViewOutputDirectory,GetTableNamesWithPrefix(table));
            
    		if (!System.IO.Directory.Exists(this.WPOutputDirectory))
    			{
    				System.IO.Directory.CreateDirectory(this.WPOutputDirectory);
    			}
                
    		CreateController(table,ControllerOutputDirectory);
                
    		CreateJSFile(table,JSOutputDirectory);
    		CreateViewFile(table,ViewOutputDirectory);

        }catch{
        }
	}
}

public void CreateController(TableSchema table,string OutputDirectory)
{
    GENController controller = this.Create<GENController>();

    controller.SourceTable = table;
	controller.NameSpace = ServiceNameSpace;	
    controller.WebNameSpace = WebNameSpace;

	string fileName = String.Format("{0}/{1}.cs", OutputDirectory, GetTableNamesWithPrefix(table)+"Controller");

    OutputFile outputFile = new OutputFile(fileName);
	controller.RenderToFile(outputFile, true);	
}

public void CreateJSFile(TableSchema table,string OutputDirectory)
{
    GENLandingJS genlandingjs = this.Create<GENLandingJS>();
    GENCreateViewJS gencreateviewjs = this.Create<GENCreateViewJS>();
    GENUpdateViewJS genupdateviewjs = this.Create<GENUpdateViewJS>();
    GENDetailViewJS gendetailviewjs = this.Create<GENDetailViewJS>();

    genlandingjs.SourceTable = table;
    string landingfileName = String.Format("{0}/{1}.js", OutputDirectory, "Landing"+GetTableNamesWithPrefix(table));	
	OutputFile landingoutputFile = new OutputFile(landingfileName);
	genlandingjs.RenderToFile(landingoutputFile, true);

    gencreateviewjs.SourceTable = table;
    string newfileName = String.Format("{0}/{1}.js", OutputDirectory, "New"+GetTableNamesWithPrefix(table));	
	OutputFile newoutputFile = new OutputFile(newfileName);
	gencreateviewjs.RenderToFile(newoutputFile, true);

    genupdateviewjs.SourceTable=table;
    string updatefileName = String.Format("{0}/{1}.js", OutputDirectory, "Edit"+GetTableNamesWithPrefix(table));	
	OutputFile updateoutputFile = new OutputFile(updatefileName);
	genupdateviewjs.RenderToFile(updateoutputFile, true);

    gendetailviewjs.SourceTable=table;
    string detailfileName = String.Format("{0}/{1}.js", OutputDirectory, "Detail"+GetTableNamesWithPrefix(table));	
	OutputFile detailoutputFile = new OutputFile(detailfileName);
	gendetailviewjs.RenderToFile(detailoutputFile, true);
}

public void CreateViewFile(TableSchema table,string OutputDirectory)
{
    GENLanding genlanding = this.Create<GENLanding>();
    genlanding.SourceTable = table;
	string genlandingfileName = String.Format("{0}/{1}.cshtml", OutputDirectory, GetTableNamesWithPrefix(table)+"Landing");	
	OutputFile landingoutputFile = new OutputFile(genlandingfileName);
	genlanding.RenderToFile(landingoutputFile, true);

    GENCreateView gencreateview = this.Create<GENCreateView>();
    gencreateview.SourceTable = table;
	string newfileName = String.Format("{0}/{1}.cshtml", OutputDirectory, "_"+GetTableNamesWithPrefix(table)+"New");	
	OutputFile newoutputFile = new OutputFile(newfileName);
	gencreateview.RenderToFile(newoutputFile, true);

    GENUpdateView genupdateview = this.Create<GENUpdateView>();
    genupdateview.SourceTable = table;
	string editfileName = String.Format("{0}/{1}.cshtml", OutputDirectory, "_"+GetTableNamesWithPrefix(table)+"Edit");	
	OutputFile editoutputFile = new OutputFile(editfileName);
	genupdateview.RenderToFile(editoutputFile, true);

    GENDetailView gendetailview = this.Create<GENDetailView>();
    gendetailview.SourceTable = table;
	string detailfileName = String.Format("{0}/{1}.cshtml", OutputDirectory, "_"+GetTableNamesWithPrefix(table)+"Detail");	
	OutputFile detailoutputFile = new OutputFile(detailfileName);
	gendetailview.RenderToFile(detailoutputFile, true);
}

public string GetTableNamesWithPrefix(TableSchema table)
{	
      string result = "";
        foreach (char c in table.Name)
        {
            if ('_'==c)
                continue;
            else
                result += c;
        }
        //Response.Write(result);
        return result;
}
</script>