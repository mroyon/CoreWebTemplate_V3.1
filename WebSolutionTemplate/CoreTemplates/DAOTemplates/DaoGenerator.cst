<%@ CodeTemplate OutputType="None" Language="C#" TargetLanguage="Text" Src="" Inherits="" CompilerVersion="v3.5" Debug="False" Description="Template description here." %>

<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Text" %>
<%@ Import NameSpace="System.IO" %>

<%@ Property Name="NameSpace" Type="System.String" Optional="False" %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" DeepLoad="True" Optional="False" Category="01. Getting Started - Required" Description="Database that the tables views, and stored procedures should be based on. IMPORTANT!!! If SourceTables and SourceViews are left blank, the Entire Database will then be generated." %>
<%@ Property Name="DaoOutputDirectory" Type="System.String" Default="" Optional="False" Description="The folder to save the generated files." Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>
<%@ Property Name="BaseDataAccessOutputDirectory" Type="System.String" Default="" Optional="False" Description="The folder to save the generated files." Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>
<%@ Property Name="DataAccessOutputDirectory" Type="System.String" Default="" Optional="False" Description="The folder to save the generated files." Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>

<%@ Register Name="DataAccess" Template="DataAccess.cst"  %>
<%@ Register Name="BaseDataAccessFactory" Template="BaseDataAccessFactory.cst"  %>
<%@ Register Name="DataAccessFactory" Template="DataAccessFactory.cst"  %>

<script runat="template">

public override void Render(TextWriter writer)
{
    if (!System.IO.Directory.Exists(this.DaoOutputDirectory))
	{
		System.IO.Directory.CreateDirectory(this.DaoOutputDirectory);
	}

	if (!System.IO.Directory.Exists(this.BaseDataAccessOutputDirectory))
	{
		System.IO.Directory.CreateDirectory(this.BaseDataAccessOutputDirectory);
	}

	if (!System.IO.Directory.Exists(this.DataAccessOutputDirectory))
	{
		System.IO.Directory.CreateDirectory(this.DataAccessOutputDirectory);
	}
		
	foreach(TableSchema table in SourceDatabase.Tables.Where(t => t.HasPrimaryKey))
	{
		//if (!table.Name.Contains("asec_"))
            CreateDao(table);
	}

   CreateBaseDaoFactory();
   CreateDaoFactory();
}

public void CreateDao(TableSchema table)
{
	DataAccess daoComposer = this.Create<DataAccess>();
	daoComposer.SourceTable = table;
	daoComposer.NameSpace = NameSpace;	
    
    string fileName = String.Format("{0}/{1}DataAccessObjects.cs", DaoOutputDirectory, table.Name.ToString().ToLower());
    
    OutputFile outputFile = new OutputFile(fileName);
	daoComposer.RenderToFile(outputFile, true);
}

public void CreateBaseDaoFactory()
{
	BaseDataAccessFactory baseDaoFactory = this.Create<BaseDataAccessFactory>();
	baseDaoFactory.SourceDatabase = SourceDatabase;
	baseDaoFactory.NameSpace = NameSpace;

	string fileName = String.Format("{0}/{1}.cs", BaseDataAccessOutputDirectory, "BaseDataAccessFactory");

	OutputFile outputFile = new OutputFile(fileName);
	baseDaoFactory.RenderToFile(outputFile, true);
}

public void CreateDaoFactory()
{
	DataAccessFactory daoFactory = this.Create<DataAccessFactory>();
	daoFactory.SourceDatabase = SourceDatabase;
	daoFactory.NameSpace = NameSpace;

	string fileName = String.Format("{0}/{1}.cs", DataAccessOutputDirectory, "DataAccessFactory");

	OutputFile outputFile = new OutputFile(fileName);
	daoFactory.RenderToFile(outputFile, true);
}

public string GetClassName(TableSchema table)
{
	string ClassName = table.Name.Substring( 0 , 1 ).ToUpper() + table.Name.Substring( 1, table.Name.Length - 1).ToLower();
	return ClassName;
}

</script>