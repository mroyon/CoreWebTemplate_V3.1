<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Generates a ASP UserControl." Debug=true %>
  
  <%@ CodeTemplate Src="C:\ClassLibrary1\ClassLibrary1\LinqFunctions.cs" Inherits="LinqFunctions" Language="C#" TargetLanguage="C#"
  Description="Generates a data context and entities for given tables." %>
 

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="System" %>
<%@ Assembly Name="System.Core" %>
<%@ Assembly Name="System.Collections" %>
<%@ Assembly Name="System.Linq" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Text" %>

<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" DeepLoad="True" Default="" Optional="False" %>
<%@ Property Name="NameSpace" Type="System.String" Default="" Optional="False" %>
<%@ Property Name="WebNameSpace" Type="System.String" Optional="False" %>
<%
    List<ColumnSchema> objColumnList = new List<ColumnSchema>();

        string divRowStart = "<div class=\"row \">";
        string divColumnStart = "<div class=\"col-md-6\">";
        string divClose = "</div>";
        string div = string.Empty;
%>
using BDO.DataAccessObjects.CorsCore;
using CLL.Localization;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Localization;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using Web.Core.Frame.RequestResponse.UseCaseRequests;
using Web.Core.Frame.RequestResponse.UseCaseResponses;
using Web.Core.Frame.Interfaces;
using Web.Core.Frame.Interfaces.Services;
using Web.Core.Frame.Interfaces.UseCases;
using BDO.DataAccessObjects.ExtendedEntities;

namespace Web.Core.Frame.UseCases
{
    public sealed class <%=GetTableNamesWithoutPrefix(SourceTable) %>UseCase : I<%=GetTableNamesWithoutPrefix(SourceTable) %>UseCase
    {
        private readonly IHttpContextAccessor _contextAccessor;
        private readonly IJwtFactory _jwtFactory;
        private readonly IStringLocalizer _sharedLocalizer;
        private readonly ILogger<<%=GetTableNamesWithoutPrefix(SourceTable) %>UseCase> _logger;
        private readonly IHttpClientHR _ihttpclienthr;

        public Error _errors { get; set; }

        public <%=GetTableNamesWithoutPrefix(SourceTable) %>UseCase(
            IHttpContextAccessor contextAccessor,
            IJwtFactory jwtFactory,
            IStringLocalizerFactory factory,
            ILoggerFactory loggerFactory
            , IHttpClientHR ihttpclienthr)
        {
            _contextAccessor = contextAccessor;
            _jwtFactory = jwtFactory;
            _logger = loggerFactory.CreateLogger<<%=GetTableNamesWithoutPrefix(SourceTable) %>UseCase>();

            var type = typeof(SharedResource);
            var assemblyName = new AssemblyName(type.GetTypeInfo().Assembly.FullName);
            _sharedLocalizer = factory.Create("SharedResource", assemblyName.Name);
            _ihttpclienthr = ihttpclienthr;
        }

        public Task<bool> Handle(<%=GetTableNamesWithoutPrefix(SourceTable) %>Request message, IOutputPort<<%=GetTableNamesWithoutPrefix(SourceTable) %>Response> outputPort)
        {
            throw new Exception("Not Implemented");
        }

        public async Task<bool> GetAll(<%=GetTableNamesWithoutPrefix(SourceTable) %>Request message, ICRUDRequestHandler<<%=GetTableNamesWithoutPrefix(SourceTable) %>Response> outputPort)
        {
            CancellationToken cancellationToken = new CancellationToken();
            try
            {
                IList<<%=GetClassName(SourceTable)%>Entity> oblist = await BFC.FacadeCreatorObjects.CorsCore.<%=GetClassName(SourceTable)%>FCC.GetFacadeCreate(_contextAccessor)
                .GetAll(new BDO.DataAccessObjects.CorsCore.<%=GetClassName(SourceTable)%>Entity(), cancellationToken);

                if (oblist != null && oblist.Count > 0)
                {
                    outputPort.GetAll(new <%=GetTableNamesWithoutPrefix(SourceTable) %>Response(oblist.ToList(), true));
                }
                else
                {
                    <%=GetTableNamesWithoutPrefix(SourceTable) %>Response objResponse = new <%=GetTableNamesWithoutPrefix(SourceTable) %>Response(false, _sharedLocalizer["NO_DATA_FOUND"], new Error(
                     "404",
                     _sharedLocalizer["NO_DATA_FOUND"]));
                    _logger.LogInformation(JsonConvert.SerializeObject(objResponse));
                    outputPort.GetAll(objResponse);
                }
                return true;
            }
            catch (Exception ex)
            {
                <%=GetTableNamesWithoutPrefix(SourceTable) %>Response objResponse = new <%=GetTableNamesWithoutPrefix(SourceTable) %>Response(false, _sharedLocalizer["DATA_FETCH_ERROR"], new Error(
                    "500",
                    ex.Message));
                _logger.LogInformation(JsonConvert.SerializeObject(objResponse));
                outputPort.GetAll(objResponse);
                return true;
            }
        }

        public async Task<bool> GetAllPaged(<%=GetTableNamesWithoutPrefix(SourceTable) %>Request message, ICRUDRequestHandler<<%=GetTableNamesWithoutPrefix(SourceTable) %>Response> outputPort)
        {
            CancellationToken cancellationToken = new CancellationToken();
            try
            {
                IList<<%=GetClassName(SourceTable)%>Entity> oblist = await BFC.FacadeCreatorObjects.CorsCore.<%=GetClassName(SourceTable)%>FCC.GetFacadeCreate(_contextAccessor)
                .GetAllByPages(message.Obj<%=GetClassName(SourceTable)%>, cancellationToken);

                if (oblist != null && oblist.Count > 0)
                {
                    outputPort.GetAllPaged(new <%=GetTableNamesWithoutPrefix(SourceTable) %>Response(oblist.ToList(), true));
                }
                else
                {
                    <%=GetTableNamesWithoutPrefix(SourceTable) %>Response objResponse = new <%=GetTableNamesWithoutPrefix(SourceTable) %>Response(false, _sharedLocalizer["NO_DATA_FOUND"], new Error(
                     "404",
                     _sharedLocalizer["NO_DATA_FOUND"]));
                    _logger.LogInformation(JsonConvert.SerializeObject(objResponse));
                    outputPort.GetAllPaged(objResponse);
                }
                return true;
            }
            catch (Exception ex)
            {
                <%=GetTableNamesWithoutPrefix(SourceTable) %>Response objResponse = new <%=GetTableNamesWithoutPrefix(SourceTable) %>Response(false, _sharedLocalizer["DATA_FETCH_ERROR"], new Error(
                    "500",
                    ex.Message));
                _logger.LogInformation(JsonConvert.SerializeObject(objResponse));
                outputPort.GetAllPaged(objResponse);
                return true;
            }
        }

        public async Task<bool> GetListView(<%=GetTableNamesWithoutPrefix(SourceTable) %>Request message, ICRUDRequestHandler<<%=GetTableNamesWithoutPrefix(SourceTable) %>Response> outputPort)
        {
            CancellationToken cancellationToken = new CancellationToken();
            try
            {

                IList<<%=GetClassName(SourceTable)%>Entity> oblist = await BFC.FacadeCreatorObjects.CorsCore.<%=GetClassName(SourceTable)%>FCC.GetFacadeCreate(_contextAccessor)
                .GAPgListView(message.Obj<%=GetClassName(SourceTable)%>, cancellationToken);
                if (oblist != null && oblist.Count > 0)
                {
                    outputPort.GetListView(new <%=GetTableNamesWithoutPrefix(SourceTable) %>Response(oblist.ToList(), true));
                }
                else
                {
                    <%=GetTableNamesWithoutPrefix(SourceTable) %>Response objResponse = new <%=GetTableNamesWithoutPrefix(SourceTable) %>Response(false, _sharedLocalizer["NO_DATA_FOUND"], new Error(
                     "404",
                     _sharedLocalizer["NO_DATA_FOUND"]));
                    _logger.LogInformation(JsonConvert.SerializeObject(objResponse));
                    outputPort.GetListView(objResponse);
                }
                return true;
            }
            catch (Exception ex)
            {
                <%=GetTableNamesWithoutPrefix(SourceTable) %>Response objResponse = new <%=GetTableNamesWithoutPrefix(SourceTable) %>Response(false, _sharedLocalizer["DATA_FETCH_ERROR"], new Error(
                    "500",
                    ex.Message));
                _logger.LogInformation(JsonConvert.SerializeObject(objResponse));
                outputPort.GetListView(objResponse);
                return true;
            }
        }

        public async Task<bool> GetSingle(<%=GetTableNamesWithoutPrefix(SourceTable) %>Request message, ICRUDRequestHandler<<%=GetTableNamesWithoutPrefix(SourceTable) %>Response> outputPort)
        {
            CancellationToken cancellationToken = new CancellationToken();
            try
            {
                <%=GetClassName(SourceTable)%>Entity objSingle = await BFC.FacadeCreatorObjects.CorsCore.<%=GetClassName(SourceTable)%>FCC.GetFacadeCreate(_contextAccessor)
                .GetSingle(message.Obj<%=GetClassName(SourceTable)%>, cancellationToken);
                if (objSingle != null)
                {
                    outputPort.GetSingle(new <%=GetTableNamesWithoutPrefix(SourceTable) %>Response(objSingle, true));
                }
                else
                {
                    <%=GetTableNamesWithoutPrefix(SourceTable) %>Response objResponse = new <%=GetTableNamesWithoutPrefix(SourceTable) %>Response(false, _sharedLocalizer["NO_DATA_FOUND"], new Error(
                     "404",
                     _sharedLocalizer["NO_DATA_FOUND"]));
                    _logger.LogInformation(JsonConvert.SerializeObject(objResponse));
                    outputPort.GetSingle(objResponse);
                }
                return true;
            }
            catch (Exception ex)
            {
                <%=GetTableNamesWithoutPrefix(SourceTable) %>Response objResponse = new <%=GetTableNamesWithoutPrefix(SourceTable) %>Response(false, _sharedLocalizer["DATA_FETCH_ERROR"], new Error(
                    "500",
                    ex.Message));
                _logger.LogInformation(JsonConvert.SerializeObject(objResponse));
                outputPort.GetSingle(objResponse);
                return true;
            }
        }

        public async Task<bool> Save(<%=GetTableNamesWithoutPrefix(SourceTable) %>Request message, ICRUDRequestHandler<<%=GetTableNamesWithoutPrefix(SourceTable) %>Response> outputPort)
        {
            _logger.LogInformation(JsonConvert.SerializeObject(message));
            CancellationToken cancellationToken = new CancellationToken();
            long? i = null;
            try
            {
                i = await BFC.FacadeCreatorObjects.CorsCore.<%=GetClassName(SourceTable)%>FCC.GetFacadeCreate(_contextAccessor)
                    .Add(message.Obj<%=GetClassName(SourceTable)%>, cancellationToken);
                outputPort.Save(new <%=GetTableNamesWithoutPrefix(SourceTable) %>Response(true, _sharedLocalizer["DATA_SAVE_CONFIRMATION"], null));
                return true;
            }
            catch (Exception ex)
            {
                <%=GetTableNamesWithoutPrefix(SourceTable) %>Response objResponse = new <%=GetTableNamesWithoutPrefix(SourceTable) %>Response(false, _sharedLocalizer["DATA_SAVE_ERROR"], new Error(
                    "500",
                    ex.Message));
                _logger.LogInformation(JsonConvert.SerializeObject(objResponse));
                outputPort.Save(objResponse);
                return true;
            }
        }

        public async Task<bool> Update(<%=GetTableNamesWithoutPrefix(SourceTable) %>Request message, ICRUDRequestHandler<<%=GetTableNamesWithoutPrefix(SourceTable) %>Response> outputPort)
        {
            CancellationToken cancellationToken = new CancellationToken();
            long? i = null;
            try
            {
                i = await BFC.FacadeCreatorObjects.CorsCore.<%=GetClassName(SourceTable)%>FCC.GetFacadeCreate(_contextAccessor)
                    .Update(message.Obj<%=GetClassName(SourceTable)%>, cancellationToken);
                outputPort.Update(new <%=GetTableNamesWithoutPrefix(SourceTable) %>Response(true, _sharedLocalizer["DATA_UPDATE_CONFIRMATION"], null));
                return true;
            }
            catch (Exception ex)
            {
                <%=GetTableNamesWithoutPrefix(SourceTable) %>Response objResponse = new <%=GetTableNamesWithoutPrefix(SourceTable) %>Response(false, _sharedLocalizer["DATA_UPDATE_ERROR"], new Error(
                       "500",
                       ex.Message));
                _logger.LogInformation(JsonConvert.SerializeObject(objResponse));
                outputPort.Update(objResponse);
                return true;
            }
        }

        public async Task<bool> Delete(<%=GetTableNamesWithoutPrefix(SourceTable) %>Request message, ICRUDRequestHandler<<%=GetTableNamesWithoutPrefix(SourceTable) %>Response> outputPort)
        {
            CancellationToken cancellationToken = new CancellationToken();
            long? i = null;
            try
            {
                i = await BFC.FacadeCreatorObjects.CorsCore.<%=GetClassName(SourceTable)%>FCC.GetFacadeCreate(_contextAccessor)
                    .Delete(message.Obj<%=GetClassName(SourceTable)%>, cancellationToken);
                outputPort.Delete(new <%=GetTableNamesWithoutPrefix(SourceTable) %>Response(true, _sharedLocalizer["DATA_DELETE_CONFIRMATION"], null));
                return true;
            }
            catch (Exception ex)
            {
                <%=GetTableNamesWithoutPrefix(SourceTable) %>Response objResponse = new <%=GetTableNamesWithoutPrefix(SourceTable) %>Response(false, _sharedLocalizer["DATA_DELETE_ERROR"], new Error(
                         "500",
                         ex.Message));
                _logger.LogInformation(JsonConvert.SerializeObject(objResponse));
                outputPort.Delete(objResponse);
                return true;
            }
        }
    }
}