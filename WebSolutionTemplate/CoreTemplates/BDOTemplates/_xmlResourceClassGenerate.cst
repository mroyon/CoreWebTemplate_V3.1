<%@ CodeTemplate OutputType="None" Language="C#" TargetLanguage="Text" Src="" Inherits="" CompilerVersion="v3.5" Debug="False" Description="Template description here." %>

<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Text" %>
<%@ Import NameSpace="System.IO" %>

<%@ Property Name="NameSpace" Type="System.String" Optional="False" Default="GW2" %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" DeepLoad="True" Optional="False" Category="01. Getting Started - Required" Description="Database that the tables views, and stored procedures should be based on. IMPORTANT!!! If SourceTables and SourceViews are left blank, the Entire Database will then be generated." %>
<%@ Property Name="OutputDirectory" Type="System.String" Default="" Optional="False" Description="The folder to save the generated files." Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>
<%@ Register Name="xmlResourceClass" Template="_xmlResourceClass.cst"  %>

<script runat="template">

public override void Render(TextWriter writer)
{
	if (!System.IO.Directory.Exists(this.OutputDirectory))
	{
		System.IO.Directory.CreateDirectory(this.OutputDirectory);
	}
		
	//foreach(TableSchema table in SourceDatabase.Tables.Where(t => t.HasPrimaryKey))
	foreach(TableSchema table in SourceDatabase.Tables)
	{	
        CreateResourceClass(table);
	}
}

public void CreateResourceClass(TableSchema table)
{
	xmlResourceClass entity = this.Create<xmlResourceClass>();
	entity.SourceTable = table;
	entity.NameSpace = NameSpace;	
	entity.ResourceName=String.Format("_{0}", GetClassName(table));

	string fileName = String.Format("{0}/_{1}.cs", this.OutputDirectory, GetClassName(table));
	
	OutputFile outputFile = new OutputFile(fileName);
	entity.RenderToFile(outputFile, true);
	
}

public string GetClassName(TableSchema table)
{
	string ClassName = table.Name.Substring( 0 , 1 ).ToLower() + table.Name.Substring( 1, table.Name.Length - 1).ToLower();
	return ClassName;
}

</script>